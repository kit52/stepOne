{"version":3,"sources":["component/Table.module.css","component/Input.js","component/Inputs.js","component/EditButtons.js","component/Table.js","component/axios-instance.js","component/TableContainer.js","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","Input","props","console","log","useState","data","value","setValue","onChange","event","target","onBlur","toCollectEditRecords","nameValue","id","item","Inputs","arrInputs","i","push","_id","EditButtons","Edit","onClick","setEditMode","recordsEdit","length","map","updateRecords","Table","arr2","users","arr","Math","floor","random","firstName","lastName","arrButtonsDelete","forEach","deleteRecord","arrButtonsEdit","className","s","table","table_container","onSubmit","e","preventDefault","putRecords","name","placeholder","table_btns","instance","axios","create","baseURL","Api","get","then","res","put","getOne","delete","update","post","TableContainer","records","setRecord","setEditRecord","useEffect","getRecords","table_content","record","obj","filter","trim","alert","catch","App","Component","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error"],"mappings":"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","file":"static/js/main.939bfc87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2-8w_\",\"table_container\":\"Table_table_container__3yJTE\",\"table_btns\":\"Table_table_btns__3__yz\",\"table_content\":\"Table_table_content__3Ph88\"};","import React from \"react\";\r\nimport { useState } from 'react';\r\nconst Input = (props) => {\r\n    console.log(props);\r\n    const [value, setValue] = useState(props.data);\r\n\r\n    function handleChange(event) {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return <input value={value}\r\n        onChange={handleChange}\r\n        onBlur={() => props.toCollectEditRecords(props.nameValue, props.id, value, props.item)} />\r\n\r\n}\r\nexport default Input","import React from \"react\";\r\nimport { useState } from 'react';\r\nimport Input from \"./Input\";\r\nconst Inputs = (props) => {\r\n    console.log(props);\r\n    // const [value, setValue] = useState(props.data);\r\n\r\n    // function handleChange(event) {\r\n    //     setValue(event.target.value);\r\n    // }\r\n\r\n\r\n    let arrInputs = [];\r\n    for (let i in props.item.data) {\r\n        arrInputs.push(<Input nameValue={i} id={props.item._id} data={props.item.data[i]} item={props.item} toCollectEditRecords={props.toCollectEditRecords} />)\r\n    }\r\n\r\n\r\n    return <div id={props.item._id}>{arrInputs}</div>\r\n}\r\nexport default Inputs","import React from \"react\";\r\nconst EditButtons = (props) => {\r\n    console.log(props);\r\n    return (\r\n        props.Edit != props.id\r\n            ? <button onClick={() => props.setEditMode(props.id)}>Edit</button>\r\n            : <button onClick={() => {\r\n                (props.recordsEdit.length > 0 ?\r\n                    props.recordsEdit.map(item => {\r\n                        props.updateRecords(item._id, item)\r\n                        props.setEditMode(\"\")\r\n                    }) : props.setEditMode(\"\"))\r\n            }}>Save</button>\r\n    )\r\n}\r\nexport default EditButtons","import * as React from 'react';\r\nimport s from \"./Table.module.css\"\r\nimport Inputs from './Inputs';\r\nimport EditButtons from './EditButtons';\r\nimport { useState } from 'react';\r\nconst Table = (props) => {\r\n\r\n    const [Edit, setEditMode] = useState(\"\");\r\n    let arr2 = [];\r\n    props.users.map(item => {\r\n        let arr = [];\r\n        for (let i in item.data) {\r\n            arr.push(\r\n                <td key={`${item._id}` + Math.floor(Math.random() * 10000000000000)}>\r\n                    {item.data[i]}\r\n                </td>\r\n            )\r\n        }\r\n\r\n        arr2.push(Edit == item._id ?\r\n            <Inputs item={item} toCollectEditRecords={props.toCollectEditRecords} />\r\n            : <tr key={`${item._id}` + item.data.firstName + item.data.lastName}>\r\n                {arr}\r\n            </tr>\r\n        )\r\n    })\r\n\r\n\r\n    let arrButtonsDelete = [];\r\n    props.users.forEach(item => {\r\n\r\n        arrButtonsDelete.push(<button onClick={() => props.deleteRecord(item._id)}>Delete</button>)\r\n    })\r\n    let arrButtonsEdit = [];\r\n    props.users.map(item => {\r\n        arrButtonsEdit.push(<EditButtons recordsEdit={props.recordsEdit}\r\n            Edit={Edit}\r\n            setEditMode={setEditMode}\r\n            item={item}\r\n            id={item._id}\r\n            updateRecords={props.updateRecords}\r\n        />)\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={s.table}>\r\n            <div className={s.table_container}>\r\n                <table>\r\n                    <thead><tr><th>First Name</th><th>Last Name</th><th>Phone</th><th>Age</th></tr></thead>\r\n                    <tbody> {arr2}</tbody>\r\n                </table>\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    props.putRecords(e)\r\n                }}>\r\n                    <input name=\"FirstName\" id=\"1\" placeholder='Enter first name' />\r\n                    <input name=\"LastName\" placeholder='Enter last name' />\r\n                    <input name=\"Phone\" placeholder='Enter your phone' />\r\n                    <input name=\"Age\" placeholder='Enter age' />\r\n                    <div><button>Add Records</button></div>\r\n                </form>\r\n            </div>\r\n            <div className={s.table_btns}>{arrButtonsDelete}</div>\r\n            <div className={s.table_btns}>{arrButtonsEdit}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Table;","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"http://178.128.196.163:3000/api/records\",\r\n\r\n})\r\n\r\nconst Api = {\r\n    get() {\r\n        return instance.get(``).then((res) => res);\r\n    },\r\n    put(data) {\r\n        return instance.put(``, { data }).then((res) => res);\r\n    },\r\n    getOne(id) {\r\n        return instance.get(`/${id}`).then((res) => {\r\n            return res.data;\r\n        });\r\n    },\r\n    delete(id) {\r\n        return instance.delete(`/${id}`).then((res) => {\r\n            return res;\r\n        });\r\n    },\r\n    update(id, data) {\r\n        return instance.post(`/${id}`, { ...data }).then((res) => {\r\n            return res;\r\n        });\r\n    },\r\n};\r\nexport default Api;\r\n","import React from \"react\"\r\nimport Table from \"./Table\";\r\nimport s from \"./Table.module.css\"\r\nimport Api from \"./axios-instance\";\r\nimport { useState, useEffect } from 'react';\r\nconst TableContainer = () => {\r\n    const [records, setRecord] = useState([]);\r\n    const [recordsEdit, setEditRecord] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (records.length < 1) {\r\n            getRecords();\r\n        }\r\n    });\r\n\r\n    const getRecords = () => {\r\n        Api.get().then((res) => {\r\n            setRecord([...records, ...res.data])\r\n        })\r\n    }\r\n\r\n    const updateRecords = (id, data) => {\r\n        debugger\r\n        Api.update(id, data).then(() => {\r\n            setRecord(records.map((item, i) => {\r\n                if (item._id == data._id) {\r\n                    return { ...item, ...data }\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            )\r\n        }).then(() => setEditRecord([])).catch(e => console.log(e))\r\n    }\r\n\r\n    const toCollectEditRecords = (name, id, data, record) => {\r\n        console.log(name);\r\n        console.log(id);\r\n        console.log(data);\r\n        console.log(record);\r\n        if (recordsEdit.length > 0) {\r\n            recordsEdit.map((item) => {\r\n                debugger\r\n                if (item._id == id) {\r\n                    let obj = {\r\n                        _id: id, data: { ...item.data, [name]: data }\r\n                    }\r\n                    setEditRecord([...recordsEdit, obj])\r\n                }\r\n            });\r\n        } else {\r\n            let obj = {\r\n                _id: id, data: { ...record.data, [name]: data }\r\n            }\r\n            setEditRecord([...recordsEdit, obj])\r\n        }\r\n    }\r\n\r\n\r\n    const putRecords = (e) => {\r\n        if (e.target[\"FirstName\"].value.trim().length > 0 || e.target[\"LastName\"].value.trim().length > 0 || e.target[\"Phone\"].value.trim().length > 0 || e.target[\"Age\"].value.trim().length > 0) {\r\n            let data = {\r\n                \"firstName\": `${e.target[\"FirstName\"].value}`,\r\n                \"lastName\": `${e.target[\"LastName\"].value}`,\r\n                \"phone\": `${e.target[\"Phone\"].value}`,\r\n                \"age\": `${e.target[\"Age\"].value}`\r\n            }\r\n\r\n            Api.put(data).then((res) => {\r\n                let id = res.data._id;\r\n                Api.getOne(id).then(res => setRecord([...records, res]))\r\n            })\r\n        } else {\r\n            alert(\"Поля ввода не должны быть пусты\")\r\n        }\r\n    }\r\n\r\n    const deleteRecord = (id) => {\r\n        Api.delete(id).then(() => {\r\n            setRecord([...records.filter((item) => !item._id == id)])\r\n        })\r\n    }\r\n\r\n    return <div className={s.table_content}>\r\n        <Table\r\n\r\n            toCollectEditRecords={toCollectEditRecords}\r\n            deleteRecord={deleteRecord}\r\n            getRecords={getRecords}\r\n            putRecords={putRecords}\r\n            updateRecords={updateRecords}\r\n            users={records}\r\n            recordsEdit={recordsEdit}\r\n        />\r\n\r\n    </div>\r\n\r\n}\r\nexport default TableContainer","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport TableContainer from \"./component/TableContainer\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <TableContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}