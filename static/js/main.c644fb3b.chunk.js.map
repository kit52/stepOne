{"version":3,"sources":["component/Table.module.css","logo.svg","component/Input.js","component/Table.js","component/axios-instance.js","component/TableContainer.js","App.js","State/State.js","index.js","registerServiceWorker.js"],"names":["module","exports","Input","props","useState","data","value","setValue","onChange","event","target","onBlur","toCollectEditRecords","name","id","item","Table","arr2","users","map","arr","i","push","_id","Math","floor","random","firstName","lastName","arrButtons","onClick","deleteRecord","arrInputs","className","s","table","table_container","Edit","onSubmit","e","preventDefault","putRecords","placeholder","table_btns","instance","axios","create","baseURL","withCredentials","Api","get","then","res","put","getOne","delete","update","post","TableContainer","records","setRecord","getRecords","recordsEdit","setEditRecord","useEffect","length","setEditMode","table_content","catch","console","log","record","obj","filter","trim","alert","App","src","logo","alt","Component","state","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error"],"mappings":"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","file":"static/js/main.c644fb3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2-8w_\",\"table_container\":\"Table_table_container__3yJTE\",\"table_btns\":\"Table_table_btns__3__yz\",\"table_content\":\"Table_table_content__3Ph88\"};","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React from \"react\";\r\nimport { useState } from 'react';\r\nconst Input = (props) => {\r\n    const [value, setValue] = useState(props.data);\r\n\r\n    function handleChange(event) {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return <input value={value} onChange={handleChange} onBlur={() => props.toCollectEditRecords(props.name, props.id, value, props.item)} />\r\n\r\n}\r\nexport default Input","import * as React from 'react';\r\nimport s from \"./Table.module.css\"\r\nimport Input from './Input';\r\nconst Table = (props) => {\r\n    let arr2 = [];\r\n    props.users.map(item => {\r\n        let arr = [];\r\n        for (let i in item.data) {\r\n            arr.push(\r\n                <td key={`${item._id}` + Math.floor(Math.random() * 10000000000000)}>\r\n                    {item.data[i]}\r\n                </td>\r\n\r\n            )\r\n        }\r\n        arr2.push(\r\n            <tr key={`${item._id}` + item.data.firstName + item.data.lastName}>\r\n                {arr}\r\n            </tr>\r\n        )\r\n    })\r\n\r\n\r\n    let arrButtons = [];\r\n    props.users.map(item => {\r\n        arrButtons.push(<button onClick={() => props.deleteRecord(item._id)}>Delete</button>)\r\n    })\r\n\r\n\r\n    let arrInputs = [];\r\n    props.users.map(item => {\r\n        let arr = [];\r\n        for (let i in item.data) {\r\n            arr.push(<Input name={i} id={item._id} data={item.data[i]} item={item} toCollectEditRecords={props.toCollectEditRecords} />)\r\n        }\r\n        arrInputs.push(<div>{arr}</div>)\r\n    })\r\n\r\n    return (\r\n        <div className={s.table}>\r\n            <div className={s.table_container}>\r\n                <table>\r\n                    <thead><tr><th>First Name</th><th>Last Name</th><th>Phone</th><th>Age</th></tr></thead>\r\n                    <tbody>{!props.Edit ? arr2 : null}</tbody>\r\n                </table>\r\n                {props.Edit ? <div>{arrInputs}</div> : null}\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    props.putRecords(e)\r\n                }}>\r\n                    <input name=\"FirstName\" id=\"1\" placeholder='Enter first name' />\r\n                    <input name=\"LastName\" placeholder='Enter last name' />\r\n                    <input name=\"Phone\" placeholder='Enter your phone' />\r\n                    <input name=\"Age\" placeholder='Enter age' />\r\n                    <div><button>Add Records</button></div>\r\n                </form>\r\n            </div>\r\n            <div className={s.table_btns}>{arrButtons}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Table;","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"http://178.128.196.163:3000/api/records\",\r\n    withCredentials: true\r\n})\r\n\r\nconst Api = {\r\n    get() {\r\n        return instance.get(``).then((res) => res);\r\n    },\r\n    put(data) {\r\n        return instance.put(``, { data }).then((res) => res);\r\n    },\r\n    getOne(id) {\r\n        return instance.get(`/${id}`).then((res) => {\r\n            return res.data;\r\n        });\r\n    },\r\n    delete(id) {\r\n        return instance.delete(`/${id}`).then((res) => {\r\n            return res;\r\n        });\r\n    },\r\n    update(id, data) {\r\n        return instance.post(`/${id}`, { ...data }).then((res) => {\r\n            return res;\r\n        });\r\n    },\r\n};\r\nexport default Api;\r\n","import React from \"react\"\r\nimport Table from \"./Table\";\r\nimport s from \"./Table.module.css\"\r\nimport Api from \"./axios-instance\";\r\nimport { useState, useEffect } from 'react';\r\nconst TableContainer = (props) => {\r\n    const [records, setRecord] = useState([]);\r\n    const getRecords = () => {\r\n        Api.get().then((res) => {\r\n            setRecord([...records, ...res.data])\r\n        })\r\n    }\r\n    const updateRecords = (id, data) => {\r\n        debugger\r\n        Api.update(id, data).then((res) => {\r\n            setEditMode(false)\r\n            setRecord(records.map((item, i) => {\r\n                if (item._id == data._id) {\r\n                    return { ...item, ...data }\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            )\r\n        }).catch(e => console.log(e))\r\n    }\r\n\r\n    const [recordsEdit, setEditRecord] = useState([]);\r\n    const toCollectEditRecords = (name, id, data, record) => {\r\n        if (recordsEdit.length > 0) {\r\n            recordsEdit.map((item) => {\r\n                debugger\r\n                if (item._id == id) {\r\n                    let obj = {\r\n                        _id: id, data: { ...item.data, [name]: data }\r\n                    }\r\n                    setEditRecord([...recordsEdit, obj])\r\n                }\r\n            });\r\n        } else {\r\n            let obj = {\r\n                _id: id, data: { ...record.data, [name]: data }\r\n            }\r\n            setEditRecord([...recordsEdit, obj])\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (records.length < 1) {\r\n            getRecords();\r\n        }\r\n    });\r\n\r\n\r\n\r\n    const putRecords = (e) => {\r\n        if (e.target[\"FirstName\"].value.trim().length > 0 || e.target[\"LastName\"].value.trim().length > 0 || e.target[\"Phone\"].value.trim().length > 0 || e.target[\"Age\"].value.trim().length > 0) {\r\n            let data = {\r\n                \"firstName\": `${e.target[\"FirstName\"].value}`,\r\n                \"lastName\": `${e.target[\"LastName\"].value}`,\r\n                \"phone\": `${e.target[\"Phone\"].value}`,\r\n                \"age\": `${e.target[\"Age\"].value}`\r\n            }\r\n            Api.put(data).then((res) => {\r\n                let id = res.data._id;\r\n                Api.getOne(id).then(res => setRecord([...records, res]))\r\n            })\r\n        } else {\r\n            alert(\"Поля ввода не должны быть пусты\")\r\n        }\r\n    }\r\n\r\n    const deleteRecord = (id) => {\r\n        Api.delete(id).then((res) => {\r\n            setRecord([...records.filter((item) => !item._id == id)])\r\n        })\r\n    }\r\n\r\n    const [Edit, setEditMode] = useState(false);\r\n\r\n    return <div className={s.table_content}>\r\n        {!Edit\r\n            ? <button onClick={() => setEditMode(true)}>Edit</button>\r\n            : <button onClick={() => {\r\n\r\n                (recordsEdit.length > 0 ?\r\n                    recordsEdit.map(item => {\r\n                        updateRecords(item._id, item)\r\n                    }) : setEditMode(false))\r\n            }}>Save</button>}\r\n        <Table\r\n            Edit={Edit}\r\n            toCollectEditRecords={toCollectEditRecords}\r\n            deleteRecord={deleteRecord}\r\n            getRecords={getRecords}\r\n            putRecords={putRecords}\r\n            users={records} />\r\n    </div>\r\n\r\n}\r\nexport default TableContainer","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport TableContainer from \"./component/TableContainer\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h2>Welcome to React</h2>\r\n        </div>\r\n        <TableContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","let state = {\r\n    users: [\r\n        { data: { \"lastName\": \"Snow\", \"firstName\": \"Jon\", \"age\": \"30\" }, \"_id\": \"0\" },\r\n        { data: { \"lastName\": \"Lannister\", \"firstName\": \"Alex\", \"age\": \"34\" }, \"_id\": \"1\" },\r\n        { data: { \"lastName\": \"Lannister\", \"firstName\": \"Garen\", \"age\": \"23\" }, \"_id\": \"2\" },\r\n        { data: { \"lastName\": \"Stark\", \"firstName\": \"Vladimir\", \"age\": \"36\" }, \"_id\": \"3\" },\r\n        { data: { \"lastName\": \"Targaryen\", \"firstName\": \"Timo\", \"age\": \"12\" }, \"_id\": \"4\" },\r\n        { data: { \"lastName\": \"Melisandre\", \"firstName\": \"Gven\", \"age\": \"45\" }, \"_id\": \"5\" },\r\n        { data: { \"lastName\": \"Clifford\", \"firstName\": \"Vladimir\", \"age\": \"43\" }, \"_id\": \"6\" },\r\n        { data: { \"lastName\": \"Frances\", \"firstName\": \"Iorik\", \"age\": \"64\" }, \"_id\": \"7\" },\r\n        { data: { \"lastName\": \"Roxie\", \"firstName\": \"Varvik\", \"age\": \"24\" }, \"_id\": \"8\" }\r\n\r\n    ]\r\n\r\n\r\n}\r\nexport const addRecord = (data) => {\r\n    return state = {\r\n        ...state,\r\n        users: [...state.users, data]\r\n    }\r\n\r\n}\r\n\r\nlet arr2 = [];\r\nstate.users.map(item => {\r\n    let arr = [];\r\n    for (let i in item.data) {\r\n        arr.push(<td>{item.data[i]}</td>)\r\n\r\n    }\r\n    arr2.push(<tr>{arr}</tr>)\r\n\r\n})\r\n\r\nexport default state;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\nimport state from './State/State';\r\nReactDOM.render(<App props={state} />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}